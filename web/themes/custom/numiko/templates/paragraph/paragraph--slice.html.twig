
{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{# make certain content slices narrower than main column #}
{%
  set narrowSlices = [
    'slice-accordion',
    'slice-content',
    'slice-media',
    'slice-quote',
    'slice-candidate--results',
    'slice-available-seats--results',
    'slice-related-downloads'
  ]
%}

{# give slices with white background padding instead of margin #}
{%
  set sliceWithPadding = [
    'slice-banner',
    'slice-polling-station-search'
  ]
%}

{% set title_class = content.field_hide_title|bool_value == 0 ? 'slice__title' : 'visually-hidden' %}
{% set padding_class = paragraph.bundle|clean_class in sliceWithPadding ? 'slice-w-padding' : 'slice' %}

{%
  set classes = [
    padding_class,
    paragraph.bundle|clean_class,
    paragraph.bundle|clean_class ~ '--' ~ view_mode|clean_class
  ]
%}

{% block paragraph %}
  {% if paragraph.bundle|clean_class in narrowSlices or paragraph.bundle|clean_class ~ '--' ~ view_mode|clean_class in narrowSlices %}
    <div class="container__pinch">
  {% endif %}
    <section{{ attributes.addClass(classes) }} aria-labelledby="paragraph-{{ paragraph.id() }}-title" >
      {% if paragraph.bundle|clean_class in sliceWithPadding %}
        <div class="container">
      {% endif %}
      {% block slice_title %}
        <h2 id="paragraph-{{ paragraph.id() }}-title" class="{{title_class}}">
          {% if jump_link is defined %}<span id="{{ jump_link.anchor }}" class="jump-links-focus">{% endif %}
            {{ content.field_title }}
          {% if jump_link is defined %}</span>{% endif %}
        </h2>
      {% endblock slice_title %}

      {% block content %}
        {{ content|without('field_title', 'field_hide_title', 'field_columns', 'field_show_borough') }}
      {% endblock content %}
      {% if paragraph.bundle|clean_class in sliceWithPadding %}
        </div>
      {% endif %}
    </section>
  {% if paragraph.bundle|clean_class in narrowSlices or paragraph.bundle|clean_class ~ '--' ~ view_mode|clean_class in narrowSlices %}
    </div>
  {% endif %}
{% endblock paragraph %}
